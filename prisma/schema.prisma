generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id          String            @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  ownerId     String
  owner       User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members     WorkspaceMember[]
  boards      Board[]

  Invite Invite[]
}

model WorkspaceMember {
  id          String    @id @default(uuid())
  userId      String
  workspaceId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Board {
  id             String    @id @default(uuid())
  title          String
  background     String
  starred        Boolean   @default(false)
  type           String
  slug           String
  status         Boolean   @default(true)
  ownerId        String
  workspaceId    String
  startDate      DateTime?
  columnOrderIds String[]
  columns        Column[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  BoardMembers BoardMember[]

  Card      Card[]
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  UserBoardPreference UserBoardPreference[]

  @@map("boards")
  Invite Invite[]
}

model UserBoardPreference {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String
  starred Boolean @default(false)

  @@unique([userId, boardId])
  @@map("user_board_preferences")
}


model Column {
  id           String   @id @default(uuid())
  title        String
  boardId      String
  board        Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cardOrderIds String[] // Lưu danh sách ID của cards theo thứ tự
  cards        Card[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("columns")
}

model Card {
  id          String    @id @default(uuid())
  title       String
  description String?
  cover       String?
  startDate   DateTime?
  columnId    String
  boardId     String
  column      Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  board       Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)

  comments    Comment[] // Thay vì String[]
  attachments Attachment[] // Thay vì String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  CardMembers CardMember[]
  User        User[]

  @@map("cards")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  cardId    String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("comments")
}

model Attachment {
  id        String   @id @default(uuid())
  fileUrl   String
  cardId    String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("attachments")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  username     String
  password     String
  isVerified   Boolean       @default(false)
  isActive     Boolean       @default(true)
  avatar       String?
  refreshToken String?
  boards       Board[] // Mối quan hệ với board
  cards        Card[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  workspaces   Workspace[]
  BoardMember  BoardMember[]
  CardMember   CardMember[] // Mối quan hệ với card

  WorkspaceMember WorkspaceMember[]

  @@map("users")
  UserBoardPreference UserBoardPreference[]
}

model BoardMember {
  boardId String
  userId  String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([boardId, userId]) // Composite primary key
  @@map("board_member")
}

model CardMember {
  cardId String
  userId String
  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([cardId, userId]) // Composite primary key
  @@map("card_members")
}

model Invite {
  id          String    @id @default(uuid())
  workspaceId String?
  boardId     String?
  token       String    @unique
  expiresAt   DateTime
  createAt    DateTime  @default(now())
  board       Board? @relation(fields: [boardId], references: [id], onDelete: Cascade)
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("invite")
}
